0. 扉頁
============

:版本:   4.45

:原作者:

    .. line-block::

         Benjy Weinberger
         Craig Silverstein
         Gregory Eitzmann
         Mark Mentovai
         Tashana Landray

:翻譯:

    .. line-block::

        `YuleFox <http://www.yulefox.com>`_
        `Yang.Y <https://github.com/yangyubo>`_
        `acgtyrant <http://acgtyrant.com>`_
        `lilinsanity <http://github.com/lilinsanity>`_

:項目主頁:

    - `Google Style Guide <http://google-styleguide.googlecode.com>`_
    - `Google 開源項目風格指南 - 中文版 <http://github.com/zh-google-styleguide/zh-google-styleguide>`_

0.1 譯者前言
--------------------

Google 經常會發佈一些開源項目, 意味著會接受來自其他代碼貢獻者的代碼. 但是如果代碼貢獻者的編程風格與 Google 的不一致, 會給代碼閱讀者和其他代碼提交者造成不小的困擾. Google 因此發佈了這份自己的編程風格指南, 使所有提交代碼的人都能獲知 Google 的編程風格.

翻譯初衷:

    規則的作用就是避免混亂. 但規則本身一定要權威, 有說服力, 並且是理性的. 我們所見過的大部分編程規範, 其內容或不夠嚴謹, 或闡述過於簡單, 或帶有一定的武斷性.

    Google 保持其一貫的嚴謹精神, 5 萬漢字的指南涉及廣泛, 論證嚴密. 我們翻譯該系列指南的主因也正是其嚴謹性. 嚴謹意味著指南的價值不僅僅侷限於它羅列出的規範, 更具參考意義的是它為了列出規範而做的謹慎權衡過程.

    指南不僅列出你要怎麼做, 還告訴你為什麼要這麼做, 哪些情況下可以不這麼做, 以及如何權衡其利弊. 其他團隊未必要完全遵照指南亦步亦趨, 如前面所說, 這份指南是 Google 根據自身實際情況打造的, 適用於其主導的開源項目. 其他團隊可以參照該指南, 或從中汲取靈感, 建立適合自身實際情況的規範.

    我們在翻譯的過程中, 收穫頗多. 希望本系列指南中文版對你同樣能有所幫助.

我們翻譯時也是盡力保持嚴謹, 但水平所限, bug 在所難免. 有任何意見或建議, 可與我們取得聯繫.

中文版和英文版一樣, 使用 ``Artistic License/GPL`` 開源許可.

中文版修訂歷史:

    - 2015-08 : 熱心的清華大學同學 @lilinsanity 完善了「類」章節以及其它一些小章節。至此，對 Google CPP Style Guide 4.45 的翻譯正式竣工。

    - 2015-07 4.45 : acgtyrant 為了學習 C++ 的規範，順便重新翻譯了本 C++ 風格指南，特別是 C++11 的全新內容。排版大幅度優化，翻譯措辭更地道，添加了新譯者筆記。Google 總部 C++ 工程師 innocentim, 清華大學不願意透露姓名的唐馬儒先生，大阪大學大學院情報科學研究科計算機科學專攻博士 farseerfc 和其它 Arch Linux 中文社區眾幫了譯者不少忙，謝謝他們。因為 C++ Primer 尚未完全入門，暫時沒有翻譯「類」章節和其它一些小章節。

    - 2009-06 3.133 : YuleFox 的 1.0 版已經相當完善, 但原版在近一年的時間裡, 其規範也發生了一些變化.

        Yang.Y 與 YuleFox 一拍即合, 以項目的形式來延續中文版 : `Google 開源項目風格指南 - 中文版項目 <http://github.com/yangyubo/zh-google-styleguide>`_.

        主要變化是同步到 3.133 最新英文版本, 做部分勘誤和改善可讀性方面的修改, 並改進排版效果. Yang.Y 重新翻修, YuleFox 做後續評審.

    - 2008-07 1.0 : 出自 `YuleFox 的 Blog <http://www.yulefox.com/?p=207>`_, 很多地方摘錄的也是該版本.


0.2 背景
--------------

C++ 是 Google 大部分開源項目的主要編程語言. 正如每個 C++ 程序員都知道的, C++ 有很多強大的特性, 但這種強大不可避免的導致它走向複雜，使代碼更容易產生 bug, 難以閱讀和維護.

本指南的目的是通過詳細闡述 C++ 注意事項來駕馭其複雜性. 這些規則在保證代碼易於管理的同時, 也能高效使用 C++ 的語言特性.

*風格*, 亦被稱作可讀性, 也就是指導 C++ 編程的約定. 使用術語 "風格" 有些用詞不當, 因為這些習慣遠不止源代碼文件格式化這麼簡單.

使代碼易於管理的方法之一是加強代碼一致性. 讓任何程序員都可以快速讀懂你的代碼這點非常重要. 保持統一編程風格並遵守約定意味著可以很容易根據 "模式匹配" 規則來推斷各種標識符的含義. 創建通用, 必需的習慣用語和模式可以使代碼更容易理解. 在一些情況下可能有充分的理由改變某些編程風格, 但我們還是應該遵循一致性原則，儘量不這麼做.

本指南的另一個觀點是 C++ 特性的臃腫. C++ 是一門包含大量高級特性的龐大語言. 某些情況下, 我們會限制甚至禁止使用某些特性. 這麼做是為了保持代碼清爽, 避免這些特性可能導致的各種問題. 指南中列舉了這類特性, 並解釋為什麼這些特性被限制使用.

Google 主導的開源項目均符合本指南的規定.

注意: 本指南並非 C++ 教程, 我們假定讀者已經對 C++ 非常熟悉.
